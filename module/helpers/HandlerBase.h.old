#ifndef HANDLER_BASE_H
#define HANDLER_BASE_H

#include "utils.h"

class HandlerBase {
public:
	HandlerBase(SV* perl_object, const char* type_name);
	virtual ~HandlerBase();

	HRESULT QueryInterface(REFIID riid, void** ppvObject);
	ULONG AddRef();
	ULONG Release();

	const char* m_typename; // for debugging
	ULONG m_refcount;
	SV* m_perl_object;
	EventRegistrationToken m_token;
};

template <typename T>
static HRESULT STDMETHODCALLTYPE Null_QueryInterface(T* This, REFIID riid, void** ppvObject) {
	return E_NOINTERFACE;
}

template <typename T>
static ULONG STDMETHODCALLTYPE Null_AddRef(T* This) {
	return 1;
}

template <typename T>
static ULONG STDMETHODCALLTYPE Null_Release(T* This) {
	return 1;
}

// stuff above is what the handlers are using

// stuff below is what EnvironmentOptions is using, but don't want to generalize it until it's working

#define QUERY_INTERFACE(type, base) static HRESULT STDMETHODCALLTYPE type##_QueryInterface(base* This, REFIID riid, void** ppvObject) { \
	return static_cast<type*>(This)->QueryInterface(riid, ppvObject); \
}

#define ADDREF(type, base) static ULONG STDMETHODCALLTYPE type##_AddRef(base* This) { \
	return static_cast<type*>(This)->AddRef(); \
}

#define RELEASE(type, base) static ULONG STDMETHODCALLTYPE type##_Release(base* This) { \
	return static_cast<type*>(This)->Release(); \
}

HRESULT Handler_QueryInterface(IUnknown* This, REFIID riid, void** ppvObject);
HRESULT Handler_AddRef(IUnknown* This);
HRESULT Handler_Release(IUnknown* This);

template <typename T>
static HRESULT STDMETHODCALLTYPE Generic_QueryInterface(T* This, REFIID riid, void** ppvObject) {
	printf("Generic_QueryInterface in %s (%p)\n", typeid(This).name(), This);
	return static_cast<T*>(This)->QueryInterface(riid, ppvObject);
}

template <typename T>
static ULONG STDMETHODCALLTYPE Generic_AddRef(T* This) {
	printf("Generic_AddRef in %s (%p)\n", typeid(This).name(), This);
	return static_cast<T*>(This)->AddRef();
}

template <typename T>
static ULONG STDMETHODCALLTYPE Generic_Release(T* This) {
	printf("Generic_Release in %s (%p)\n", typeid(This).name(), This);
	return static_cast<T*>(This)->AddRef();
}

#endif
